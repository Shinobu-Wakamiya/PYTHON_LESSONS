step_limit = 5000
reset_time_list = T_values
num_realizations = 5000
p_values_list = X_values
num_sites = 10000


def random_walk(step_limit, reset_time_list, X_values, num_realizations):
    all_displacements = []
    all_total_times = []
    long = []
    pi=[]
    qi=[]
    
    for _ in range(num_realizations):
        position = num_sites // 2
        total_time = 0
        displacement = []
        total_time_array = []
        

        while total_time < step_limit:
            reset_time = int(np.random.choice(reset_time_list))

            for t in range(reset_time):
                pe = np.random.choice(X_values)
                while pe>=1:
                    pe = np.random.choice(X_values)
                qe = 1-pe
                pi.append(pe)
                qi.append(qe)
                move = np.random.choice([-1,1],p=[pe,qe])
                position += move

                #Boundary Condition
                if position < 0:
                    position = num_sites - 1
                elif position >= num_sites:
                    position = 0
                    
                displacement.append(abs(position-(num_sites // 2)))
                # print(displacement)
                total_time_array.append(total_time+t+1)
            
                if total_time+t+1 >= step_limit:
                    break

            total_time += reset_time
            long.append(abs(position-(num_sites // 2)))
            position = num_sites // 2
            

        all_displacements.append(displacement)
        all_total_times.append(total_time_array)

#    all_displacements = np.array(all_displacements)
#    all_total_times = np.array(all_total_times)

    avg_displacement = np.mean(all_displacements, axis=0)
    avg_total_time = np.mean(all_total_times, axis=0)

    return avg_total_time, avg_displacement, long, pi, qi



#Lists to store long time displacements fro two diffrent p values
long_time_displacements_p1 = {}

#plotting setup
plt.figure(figsize=(10,6))

for i in range(10):
    avg_total_time, avg_displacement, long, pi, qi = random_walk(step_limit, reset_time_list, X_values, num_realizations)

    long_time_displacements_p1[i] = long
    
    plt.plot(avg_total_time, avg_displacement, label=f'realization={i+1}')
    



plt.plot(avg_total_time, avg_displacement)
plt.xlabel('Total Time (Steps)')
plt.ylabel('Average Displacement')
plt.title('Total Time Vs Average Dis')
plt.legend()
plt.savefig('mean_displacement_new1.png',dpi=300)
plt.show()

for i in range(10):
    long_displacement = long_time_displacements_p1[i]
    print(f'long time displacements for realization ={i+1}: {long_displacement[:10]}')

############################################################################################################
PART 2
##############################################################################################################
ro=0.001
key_list = list(long_time_displacements_p1.keys())

first_key = key_list[0]
first_value = long_time_displacements_p1[first_key]
second_key = key_list[1]
second_value = long_time_displacements_p1[second_key]

bins = np.linspace(min(min(first_value), min(second_value)), max(max(first_value),max(second_value)), 30)
pdf1,_ = np.histogram(first_value, bins=bins, density=True)
pdf2,_ = np.histogram(second_value, bins=bins, density=True)

bin_centers = (bins[:-1]+bins[1:]) / 2

plt.figure(figsize=(8,6))

#data 1
plt.scatter(bin_centers, pdf1, color='b', label='p = 0.04', alpha=0.6)
plt.plot(bin_centers, pdf1, color='b', alpha=0.6)
#data 2
plt.scatter(bin_centers, pdf2, color='r', label='p = 0.04', alpha=0.6)
plt.plot(bin_centers, pdf2, color='r', alpha=0.6)

arrp=np.array(pi)
arrq=np.array(qi)

arrd= arrp/arrq
di=arrd.tolist()
average_qp = sum(di)/len(di)

arri=1/arrp
rri=arri.tolist()
average_1p = sum(rri)/len(rri)

v=(1-average_qp)/average_1p

def f(y):
    return (ro * np.exp(-ro*y/v) / v)

y = np.linspace(min(bin_centers),max(bin_centers),1000)
Py = f(y)

plt.plot(y, Py, label='Py = (ro/v) * exp(-y * (ro/v))' , color='g', linestyle='--', linewidth=2)

plt.xlabel('long time displacement y')
plt.ylabel('Probability density / f(y)')
plt.title('for two values of p, probability density vs long time displacemnnt curve')
plt.legend()
plt.grid(True)
plt.savefig('Py_y.png',dpi=300)
plt.show()
